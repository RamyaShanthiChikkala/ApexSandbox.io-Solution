public List<String> commonChars(List<String> strs){
     if (strs == null || strs.isEmpty()) {
        return new List<String>();
    }
   Map<Integer,Integer> freqMap = new Map<Integer,Integer>(); 
    Integer[] chars = strs[0].getChars();
    for(Integer i = 0 ; i < chars.size() ; i++)
       {
           if(freqMap.containsKey(chars[i]))
           {
               Integer val = freqMap.get(chars[i]);
               freqMap.put(chars[i],val+1);
           }
           else
            freqMap.put(chars[i],1);
       }
    for(Integer j = 1 ; j < strs.size() ; j++)
    {
    Map<Integer, Integer> currentFreqMap = new Map<Integer, Integer>();
       Integer[] chars1 = strs[j].getChars();
       for(Integer i = 0 ; i < chars1.size() ; i++)
       {
            if (currentFreqMap.containsKey(chars1[i])) {
                    currentFreqMap.put(chars1[i], currentFreqMap.get(chars1[i]) + 1);
                } else {
                    currentFreqMap.put((chars1[i]), 1);
                }  
       }
    }
    for (Integer i : freqMap.keySet()) {
            if (currentFreqMap.containsKey(ch)) {
                freqMap.put(i, Math.min(freqMap.get(i), currentFreqMap.get(i)));
            } else {
                freqMap.put(i, 0);
            }
        }
    
    List<String> result = new List<String>();
    for (Integer c : freqMap.keySet()) {
        Integer count = freqMap.get(c);
        for (Integer i = 0; i < count; i++) {
            result.add(String.fromCharArray(new List<Integer>{c}));
        }
    }
    return result;
}